I"h<p>One of my new year’s resolution is to learn and practice functional programming concepts in two languages I code most of my time. Javascript and Ruby. Since  it is easy to understand the concepts in some LISP variant, I added scheme to the list and now I have  3 different languages to practice my “lambda skills”.</p>

<p>Though I am Computer Science Graduate and have taken Programming language courses, I have never understood  the meaning and scope of currying so far. So I am starting with currying in my attempt to understand the “science of lambda”.</p>

<p>The Code of Currying</p>

<p>Currying can be defined as ,
“The technique of transforming a function that takes multiple arguments(or a n- tuple of arguments)  in such away that it can be called as a chain of functions each with a single argument”. It is named after the Mathematician Haskel B.Curry. Otherwise something like “Automatic function decomposition” would have been a more “under standable” name. Alternately currying can be termed as, “The concept of deconstructing a function of multiple parameters to a composition of several functions of arity 1”. Arity is the number of arguments a function can take.</p>

<p>Now let us write a scheme function that multiplies two numbers.</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">multiply</span>
       <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
        <span class="p">(</span><span class="nb">*</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span></code></pre></figure>

<p>Now let us write a function that doubles a number using the above multiply function.</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">double</span>
     <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">multiply</span> <span class="mi">2</span> <span class="nv">x</span><span class="p">)))</span></code></pre></figure>

<p>Another function that halves a number :</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">half</span>
<span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
   <span class="p">(</span><span class="nv">multiply</span> <span class="mf">.5</span> <span class="nv">x</span><span class="p">)))</span></code></pre></figure>

<p>Now you can see that double is nothing but multiply called with second argument always being 2. And for half it is 0.5 .</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">curry-multiply</span>
     <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
        <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">y</span><span class="p">)</span>
             <span class="p">(</span><span class="nb">*</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
 </code></pre></figure>

<p>The advantage of this new construct is that, we can create a lot of variants of multiply by simply calling multiply with one argument.</p>

<figure class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">double</span> <span class="p">(</span> <span class="nv">curry-multiply</span> <span class="mi">2</span><span class="p">))</span>
<span class="p">(</span><span class="nv">define</span> <span class="nv">half</span>  <span class="p">(</span> <span class="nv">curry-multiply</span> <span class="mf">.5</span><span class="p">))</span></code></pre></figure>

:ET